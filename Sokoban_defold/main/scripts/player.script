local function draw_line(from, to, color)
    msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = color })
end

local function raycast_check(self, from, to)
    local result = physics.raycast(from, to, { hash("default") })
    if result then
        draw_line(from, result.position, vmath.vector4(0,1,0,1))
        return false
    else
        draw_line(from, to, vmath.vector4(1,0,0,1))
        return true
    end
end

local function check_can_move(self)
    local from = go.get_position()
    from.x = from.x + 32
    from.y = from.y - 32
    local left = vmath.vector3(from.x - 40, from.y, 0)
    local right = vmath.vector3(from.x + 40, from.y, 0)
    local up = vmath.vector3(from.x, from.y + 40, 0)
    local down = vmath.vector3(from.x, from.y - 40, 0)
    self.can_move_left = raycast_check(self, from, left)
    self.can_move_right = raycast_check(self, from, right)
    self.can_move_up = raycast_check(self, from, up)
    self.can_move_down = raycast_check(self, from, down)
end

function init(self)
    -- Add initialization code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
    msg.post(".", "acquire_input_focus")
    local rendercam = require "rendercam.rendercam"
    rendercam.follow("player")
    self.follow = true
    self.input = vmath.vector3()
end

function final(self)
    -- Add finalization code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
    if vmath.length_sqr(self.input) > 1 then
        self.input = vmath.normalize(self.input)
    end
    local movement = self.input * 64
    local p = go.get_position()
    self.prev_position = p
    go.set_position(p + movement)
    self.input = vmath.vector3()
    check_can_move(self)
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Learn more: https://defold.com/manuals/message-passing/
    -- Remove this function if not needed
    if message_id == hash("collision_response") then
        go.set_position(self.prev_position)
    end
end

function on_input(self, action_id, action)
    -- Add input-handling code here. The game object this script is attached to
    -- must have acquired input focus:
    --
    --    msg.post(".", "acquire_input_focus")
    --
    -- All mapped input bindings will be received. Mouse and touch input will
    -- be received regardless of where on the screen it happened.
    -- Learn more: https://defold.com/manuals/input/
    -- Remove this function if not needed
    if action_id == hash("up") and action.released and self.can_move_up then
        self.input.x = 0
        self.input.y = 1
    elseif action_id == hash("down") and action.released and self.can_move_down then
        self.input.x = 0
        self.input.y = -1
    elseif action_id == hash("left") and action.released and self.can_move_left then
        self.input.x = -1
        self.input.y = 0
    elseif action_id == hash("right") and action.released and self.can_move_right then
        self.input.x = 1
        self.input.y = 0
    else
        
    end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Learn more: https://defold.com/manuals/hot-reload/
    -- Remove this function if not needed
end
